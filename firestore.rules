rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Allow creation of user profiles on registration
    }

    // Services collection rules
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if false; // Deny deletion of bookings for now
    }

    // Announcements collection rules
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}
